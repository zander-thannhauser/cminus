
void printf(const char*, ...);

#define write(x) printf("%s == %i\n", #x, (x));

void exit();

// contains a buffer overflow that valgrind complains about
// not my compiler's fault though!

void main()
{
	int source[19];
	int target[16];
	int cost[400];
	int n, m, i, j, size;

	source[0] = 0;
	source[1] = 1;
	source[2] = 2;
	source[3] = 3;
	source[4] = 4;
	source[5] = 5;
	source[6] = 6;
	source[7] = 7;
	source[8] = 8;
	source[9] = 9;
	source[10] = 8;
	source[11] = 7;
	source[12] = 6;
	source[13] = 5;
	source[14] = 4;
	source[15] = 3;
	source[16] = 2;
	source[17] = 1;
	source[18] = 0;

	target[0] = 0;
	target[1] = 1;
	target[2] = 3;
	target[3] = 5;
	target[4] = 7;
	target[5] = 9;
	target[6] = 11;
	target[7] = 4;
	target[8] = 3;
	target[9] = 2;
	target[10] = 1;
	target[11] = 9;
	target[12] = 8;
	target[13] = 7;
	target[14] = 6;
	target[15] = 0;

	size = 20;
	n = 0;

	write(__LINE__);

	while (source[n+1] != 0) {
		cost[n] = n;
		n = n + 1;
	}

	write(__LINE__);

	m = 0;
	while (target[m+1] != 0) {
		cost[m*size] = m;
		m = m + 1;
	}

	write(n);
	write(m);

	i = 1;
	while (i <= m)
	{
		write(__LINE__);
		j = 1;
		while (j <= n)
		{
			write(__LINE__);
			
			cost[i * size + j] = cost[(i - 1) * size + j - 1];

			if (target[i] != source[j])
			{
				cost[i * size + j] = cost[i * size + j] + 1;
			}

			if (cost[(i - 1) * size + j] < cost[i * size + j])
			{
				cost[i * size + j] = cost[(i - 1) * size + j] + 1;
			}
			
			if (cost[i * size + j - 1] < cost[i * size + j])
			{
				cost[i * size + j] = cost[i * size + j - 1] + 1;
			}
			
			j = j + 1;
			
		}
		
		i = i + 1;
		
	}

	write(m); // 14
	write(n); // 17
	write(cost[m * size + n]); // 12
	exit();
}




